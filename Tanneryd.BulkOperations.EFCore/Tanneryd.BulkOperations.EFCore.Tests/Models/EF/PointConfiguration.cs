// <auto-generated>
// ReSharper disable All

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Tanneryd.BulkOperations.EFCore.Tests
{
    // Point
    public class PointConfiguration : IEntityTypeConfiguration<Point>
    {
        public void Configure(EntityTypeBuilder<Point> builder)
        {
            builder.ToTable("Point", "dbo");
            builder.HasKey(x => new { x.XCoordinateId, x.YCoordinateId }).HasName("PK_dbo.Point").IsClustered();

            builder.Property(x => x.XCoordinateId).HasColumnName(@"XCoordinateId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.YCoordinateId).HasColumnName(@"YCoordinateId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("float").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.XCoordinate).WithMany(b => b.Points_XCoordinateId).HasForeignKey(c => c.XCoordinateId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.Point_dbo.Coordinate_XCoordinateId");
            builder.HasOne(a => a.YCoordinate).WithMany(b => b.Points_YCoordinateId).HasForeignKey(c => c.YCoordinateId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.Point_dbo.Coordinate_YCoordinateId");

            builder.HasIndex(x => x.XCoordinateId).HasName("IX_XCoordinateId");
            builder.HasIndex(x => x.YCoordinateId).HasName("IX_YCoordinateId");
        }
    }

}
// </auto-generated>
